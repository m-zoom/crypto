markdown
# Automated Forex Chart Pattern Recognition System - Implementation Guide

## Overview
Build a Flask web application that automates forex chart pattern recognition using machine learning models. The system should:
- Fetch real-time and historical forex data
- Detect patterns using pre-trained ML models
- Display interactive charts with pattern annotations
- Provide real-time monitoring with configurable parameters
- Organize detection logs in categorized sections

## Core Components
1. **Flask Backend** - Python server handling:
   - Data fetching
   - Pattern detection
   - API endpoints
2. **React/Vue Frontend** - Modern UI with:
   - Interactive charts
   - Real-time monitoring controls
   - Pattern visualization
3. **Machine Learning Integration** - Pattern detection using:
   - double_bottom_model.pkl
   - double_top_model.pkl
   - triple_bottom_model.pkl
   - triple_top_model.pkl

## System Architecture
```mermaid
graph TD
    A[User Interface] -->|HTTP Requests| B[Flask App]
    B --> C[Data Fetcher]
    C --> D[Financial API]
    B --> E[Pattern Detector]
    E --> F[ML Models]
    B --> G[Chart Generator]
    G --> H[Chart Rendering]
    E --> I[Log Manager]
Required Features
1. User Interface
Stock Selection: Dropdown with major forex pairs (EUR/USD, GBP/USD, etc.)

Timeframe Controls:

html
<select id="timeframe">
  <option value="5min">5 Minutes</option>
  <option value="15min">15 Minutes</option>
  <option value="30min">30 Minutes</option>
  <option value="60min">60 Minutes</option>
  <option value="daily">Daily</option>
</select>
Monitoring Controls:

Start/Stop buttons

Real-time status indicator

Chart Display Area:

Main chart showing price data

Pattern annotations (e.g., highlight detected patterns)

Log Sections:

Detected Patterns

Not Detected Patterns

Model Confidence Levels

System Messages

2. Backend Functionality
Data Handling (utils/data_fetcher.py)
python
def get_realtime_data(ticker, timeframe):
    """Fetch real-time data for monitoring"""
    # Uses getdata.py functionality
    pass

def get_historical_data(ticker, start_date, end_date):
    """Fetch historical data for pattern analysis"""
    # Uses getfulldata.py functionality
    pass
Pattern Detection (utils/pattern_detector.py)
python
def detect_patterns(candles):
    """Run pattern detection using all models"""
    results = {
        'double_bottom': detect_double_bottom(candles),
        'double_top': detect_double_top(candles),
        'triple_bottom': detect_triple_bottom(candles),
        'triple_top': detect_triple_top(candles)
    }
    return results

def detect_double_bottom(candles):
    """Detect double bottom pattern"""
    # Load double_bottom_model.pkl
    # Return (detected: bool, confidence: float)
    pass
Flask Endpoints
python
@app.route('/start_monitoring', methods=['POST'])
def start_monitoring():
    # Start monitoring thread with parameters:
    # - ticker
    # - timeframe
    # - frequency
    pass

@app.route('/stop_monitoring', methods=['POST'])
def stop_monitoring():
    # Terminate monitoring thread
    pass

@app.route('/get_pattern_analysis')
def get_pattern_analysis():
    # Return historical pattern analysis
    pass

@app.route('/monitoring_updates')
def monitoring_updates():
    # SSE endpoint for real-time updates
    pass
3. Real-time Monitoring System
Monitoring Thread:

python
def monitoring_worker(ticker, timeframe, frequency):
    while monitoring_active:
        # 1. Fetch latest data
        candles = get_realtime_data(ticker, timeframe)
        
        # 2. Detect patterns
        results = detect_patterns(candles)
        
        # 3. Update chart data
        update_chart(candles, results)
        
        # 4. Categorize and store logs
        categorize_logs(results)
        
        # 5. Sleep based on frequency
        time.sleep(frequency)
Configuration:

python
MONITORING_ENABLED = True
MONITOR_FREQUENCY = 5 * 60  # Configurable from UI
TIMEFRAME = "5min"          # Configurable from UI
MAX_DURATION = 24 * 60 * 60
4. Log Management System
Log Structure:

python
log_entry = {
    'timestamp': datetime.now(),
    'pattern': 'double_bottom',
    'detected': True,
    'confidence': 85.7,
    'candle_data': [...]  # Last 20 candles
}
Categorization:

Detected Patterns: Confidence > 70%

Not Detected: Confidence < 30%

Low Confidence: 30% < Confidence < 70%

System Messages: API errors, monitoring status

5. Chart Visualization
Requirements:

Candlestick chart using Chart.js or Plotly

Real-time updates during monitoring

Pattern annotations (e.g., highlight double bottoms)

Technical indicators overlay (optional)

Chart Update Flow:

Fetch latest 20 candles

Detect patterns

Generate chart with pattern annotations

Push update to frontend via SSE

Implementation Notes
Key Integration Points
Model Loading: Load all 4 models at app startup

Data Pipeline:

Historical data → Full pattern analysis

Real-time data → Monitoring

Thread Management:

Use threading for monitoring

Implement proper start/stop controls

Error Handling:

API failure recovery

Model prediction fallbacks

Connection loss handling

Security Considerations
Validate all user inputs

Sanitize ticker symbols

Rate limit API endpoints

Use environment variables for API keys

Performance Optimization
Cache historical data

Preload ML models

Compress SSE data

Implement data pagination for logs

Testing Strategy
Unit tests for pattern detection

Integration tests for data fetching

End-to-end tests for user workflows

Load testing for monitoring system

text

This comprehensive prompt provides all the necessary details for an AI to build the system according to your requirements. It includes:

1. Clear system architecture and components
2. Detailed feature specifications
3. Code structure and key functions
4. Real-time monitoring workflow
5. Log management system
6. Visualization requirements
7. Important implementation considerations